<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="485px" preserveAspectRatio="none" style="width:825px;height:485px;" version="1.1" viewBox="0 0 825 485" width="825px" zoomAndPan="magnify"><defs><filter height="300%" id="f92j9vudvots4" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="76" x="10" y="225.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="56" x="20" y="248.1123">设计原则</text><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="111" x="136" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="91" x="146" y="42.9951">开闭原则-OCP</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="266" x="300" y="33.8467">对扩展开放，对修改关闭；是一个综合原则</text><path d="M247,38.1484 L257,38.1484 C272,38.1484 272,29 287,29 L297,29 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="350" x="300" y="52.1436">实现途径：用抽象构建框架，用实现扩展细节；其他原则</text><path d="M247,38.1484 L257,38.1484 C272,38.1484 272,47.2969 287,47.2969 L297,47.2969 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,38.1484 126,38.1484 L136,38.1484 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="109" x="136" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="89" x="146" y="99.292">单一职责-SRP</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="140" x="298" y="80.9951">每个类只完成一个功能</text><path d="M245,94.4453 L255,94.4453 C270,94.4453 270,76.1484 285,76.1484 L295,76.1484 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="238" x="298" y="99.292">实现途径：职责细分，抽取；组合模式</text><path d="M245,94.4453 L255,94.4453 C270,94.4453 270,94.4453 285,94.4453 L295,94.4453 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="448" x="298" y="117.5889">注意：主要在库代码写作中考虑，普通业务代码中反而会让代码过于复杂</text><path d="M245,94.4453 L255,94.4453 C270,94.4453 270,112.7422 285,112.7422 L295,112.7422 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,94.4453 126,94.4453 L136,94.4453 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="90" x="136" y="148.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="70" x="146" y="171.1826">迪米特法则</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="126" x="279" y="136.5889">别称：最少知道原则</text><path d="M226,166.3359 L236,166.3359 C251,166.3359 251,131.7422 266,131.7422 L276,131.7422 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="196" x="279" y="154.8857">如果两个类不必彼此直接通信，</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="280" x="279" y="171.1826">那么这两个类就不应当发生直接的相互调用，</text><path d="M226,166.3359 L236,166.3359 C251,166.3359 251,158.1875 266,158.1875 L276,158.1875 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="420" x="279" y="189.4795">实现途径：如果其中的一个类需要调用另一个类的某一个方法的话，</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="182" x="279" y="205.7764">可以通过第三方转发这个调用</text><path d="M226,166.3359 L236,166.3359 C251,166.3359 251,192.7813 266,192.7813 L276,192.7813 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,166.3359 126,166.3359 L136,166.3359 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="134" x="136" y="227.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="114" x="146" y="250.5186">里氏替换原则-LSP</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="224" x="323" y="224.0732">父类出现的地方都应该能被子类替换</text><path d="M270,245.6719 L280,245.6719 C295,245.6719 295,219.2266 310,219.2266 L320,219.2266 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="378" x="323" y="242.3701">实现途径：子类可以扩展父类的功能，但不能改变父类的功能</text><path d="M270,245.6719 L280,245.6719 C295,245.6719 295,237.5234 310,237.5234 L320,237.5234 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="336" x="323" y="260.667">意义：里氏替换原则主要阐述了有关继承的一些原则，</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="490" x="323" y="276.9639">也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理</text><path d="M270,245.6719 L280,245.6719 C295,245.6719 295,263.9688 310,263.9688 L320,263.9688 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,245.6719 126,245.6719 L136,245.6719 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="104" x="136" y="289.5625"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="84" x="146" y="312.5576">依赖倒置原则</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="350" x="293" y="295.2607">高层模块不应该依赖低层模块，二者都应该依赖其抽象。</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="252" x="293" y="311.5576">抽象不应该依赖细节，细节应该依赖抽象</text><path d="M240,307.7109 L250,307.7109 C265,307.7109 265,298.5625 280,298.5625 L290,298.5625 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="168" x="293" y="329.8545">依赖倒置原则的核心思想是</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="84" x="461" y="329.8545">面向接口编程</text><path d="M240,307.7109 L250,307.7109 C265,307.7109 265,325.0078 280,325.0078 L290,325.0078 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,307.7109 126,307.7109 L136,307.7109 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="130" x="136" y="351.6016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="110" x="146" y="374.5967">接口隔离原则-ISP</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="313" x="319" y="348.1514">一个类对另外一个类的依赖是建立在最小的接口上;</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="252" x="319" y="364.4482">客户端不应该被迫依赖于它不使用的方法</text><path d="M266,369.75 L276,369.75 C291,369.75 291,351.4531 306,351.4531 L316,351.4531 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="350" x="319" y="382.7451">实现途径：使用多个专门的接口比使用单一的总接口要好</text><path d="M266,369.75 L276,369.75 C291,369.75 291,377.8984 306,377.8984 L316,377.8984 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="168" x="319" y="401.042">注重的是对接口依赖的隔离</text><path d="M266,369.75 L276,369.75 C291,369.75 291,396.1953 306,396.1953 L316,396.1953 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,369.75 126,369.75 L136,369.75 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f92j9vudvots4)" height="36.2969" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="114" x="136" y="422.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="94" x="146" y="445.7842">[其他]控制反转</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="277" x="303" y="419.3389">不是由使用者来创建(new)所依赖的类实例，</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="280" x="303" y="435.6357">而是通过一些方法将外部创建好的类实例给它</text><path d="M250,440.9375 L260,440.9375 C275,440.9375 275,422.6406 290,422.6406 L300,422.6406 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="168" x="303" y="453.9326">在接口中定义要注入的信息</text><path d="M250,440.9375 L260,440.9375 C275,440.9375 275,449.0859 290,449.0859 L300,449.0859 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="196" x="303" y="472.2295">实现方式：依赖注入、依赖查找</text><path d="M250,440.9375 L260,440.9375 C275,440.9375 275,467.3828 290,467.3828 L300,467.3828 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M86,243.2656 L96,243.2656 C111,243.2656 111,440.9375 126,440.9375 L136,440.9375 " fill="none" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4fcd2b971d1bbee8958406a816431362]
@startmindmap 设计原则
* 设计原则

++ 开闭原则-OCP
+++_ 对扩展开放，对修改关闭；是一个综合原则
+++_ 实现途径：用抽象构建框架，用实现扩展细节；其他原则

++ 单一职责-SRP
+++_ 每个类只完成一个功能
+++_ 实现途径：职责细分，抽取；组合模式
+++_ 注意：主要在库代码写作中考虑，普通业务代码中反而会让代码过于复杂

++ 迪米特法则
+++_ 别称：最少知道原则
+++_ 如果两个类不必彼此直接通信，\n那么这两个类就不应当发生直接的相互调用，
+++_ 实现途径：如果其中的一个类需要调用另一个类的某一个方法的话，\n可以通过第三方转发这个调用

++ 里氏替换原则-LSP
+++_ 父类出现的地方都应该能被子类替换
+++_ 实现途径：子类可以扩展父类的功能，但不能改变父类的功能
+++_ 意义：里氏替换原则主要阐述了有关继承的一些原则，\n也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理

++ 依赖倒置原则
+++_ 高层模块不应该依赖低层模块，二者都应该依赖其抽象。\n抽象不应该依赖细节，细节应该依赖抽象
+++_ 依赖倒置原则的核心思想是**面向接口编程**

++ 接口隔离原则-ISP
+++_ 一个类对另外一个类的依赖是建立在最小的接口上;\n客户端不应该被迫依赖于它不使用的方法
+++_ 实现途径：使用多个专门的接口比使用单一的总接口要好
+++_ 注重的是对接口依赖的隔离

++ [其他]控制反转
+++_ 不是由使用者来创建(new)所依赖的类实例，\n而是通过一些方法将外部创建好的类实例给它
+++_ 在接口中定义要注入的信息
+++_ 实现方式：依赖注入、依赖查找


@endmindmap

PlantUML version 1.2020.12(Sat Jun 06 10:54:15 UTC 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>