@startmindmap 设计原则
* 设计原则

++ 开闭原则-OCP
+++_ 对扩展开放，对修改关闭；是一个综合原则
+++_ 实现途径：用抽象构建框架，用实现扩展细节；其他原则

++ 单一职责-SRP
+++_ 每个类只完成一个功能
+++_ 实现途径：职责细分，抽取；组合模式
+++_ 注意：主要在库代码写作中考虑，普通业务代码中反而会让代码过于复杂

++ 迪米特法则
+++_ 别称：最少知道原则
+++_ 如果两个类不必彼此直接通信，\n那么这两个类就不应当发生直接的相互调用，
+++_ 实现途径：如果其中的一个类需要调用另一个类的某一个方法的话，\n可以通过第三方转发这个调用

++ 里氏替换原则-LSP
+++_ 父类出现的地方都应该能被子类替换
+++_ 实现途径：子类可以扩展父类的功能，但不能改变父类的功能
+++_ 意义：里氏替换原则主要阐述了有关继承的一些原则，\n也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理

++ 依赖倒置原则
+++_ 高层模块不应该依赖低层模块，二者都应该依赖其抽象。\n抽象不应该依赖细节，细节应该依赖抽象
+++_ 依赖倒置原则的核心思想是**面向接口编程**

++ 接口隔离原则-ISP
+++_ 一个类对另外一个类的依赖是建立在最小的接口上;\n客户端不应该被迫依赖于它不使用的方法
+++_ 实现途径：使用多个专门的接口比使用单一的总接口要好
+++_ 注重的是对接口依赖的隔离

++ [其他]控制反转
+++_ 不是由使用者来创建(new)所依赖的类实例，\n而是通过一些方法将外部创建好的类实例给它
+++_ 在接口中定义要注入的信息
+++_ 实现方式：依赖注入、依赖查找


@endmindmap